{
  "_args": [
    [
      {
        "raw": "joi@^13.1.2",
        "scope": null,
        "escapedName": "joi",
        "name": "joi",
        "rawSpec": "^13.1.2",
        "spec": ">=13.1.2 <14.0.0",
        "type": "range"
      },
      "/home/rahmatrmdn/Documents/apache2/tugas_sig/node_modules/xml2json"
    ]
  ],
  "_from": "joi@^13.1.2",
  "_hasShrinkwrap": false,
  "_id": "joi@13.7.0",
  "_location": "/joi",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/joi_13.7.0_1538210963095_0.515311783509186"
  },
  "_npmUser": {
    "name": "marsup",
    "email": "nicolas@morel.io"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "joi@^13.1.2",
    "scope": null,
    "escapedName": "joi",
    "name": "joi",
    "rawSpec": "^13.1.2",
    "spec": ">=13.1.2 <14.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/xml2json"
  ],
  "_resolved": "https://registry.npmjs.org/joi/-/joi-13.7.0.tgz",
  "_shasum": "cfd85ebfe67e8a1900432400b4d03bbd93fb879f",
  "_shrinkwrap": null,
  "_spec": "joi@^13.1.2",
  "_where": "/home/rahmatrmdn/Documents/apache2/tugas_sig/node_modules/xml2json",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "dependencies": {
    "hoek": "5.x.x",
    "isemail": "3.x.x",
    "topo": "3.x.x"
  },
  "deprecated": "This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).",
  "description": "Object schema validation",
  "devDependencies": {
    "code": "5.x.x",
    "hapitoc": "1.x.x",
    "lab": "15.x.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xuY5VkHfeOYK3Hdi91ulocfuFopwgbSORmIwzcwHKESQhC7w1kD5jaVSPnqDxS2I8t3RZ9omCKAxNwXN5zG1/Q==",
    "shasum": "cfd85ebfe67e8a1900432400b4d03bbd93fb879f",
    "tarball": "https://registry.npmjs.org/joi/-/joi-13.7.0.tgz",
    "fileCount": 27,
    "unpackedSize": 182434,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbrzyTCRA9TVsSAnZWagAAkSAP/AyX63qSDf4Nhk0O6Fp/\nPTBTqLhC8CSqmOxtBmqvpAlLKpZVEuKOgh04faMbk3QJDi9L/yXMaIeYcF22\nQPrTga96/5DTvWeTSBhpZjCz3gzjsGXqonwXT1rb9VoUOV6s/6QrG1Sg/zw/\nfLbpxG+oeIWAIFXsXNFh2sFqajAz6gxCOup2apu8AK/vCSTqQ05B7tjr3cKq\nBrdc/eZ+lPmrUHiTtbWCUQNtaOcerc9q+OdwDrUAQYI84uW/EYN2c93TgO23\nxt5TCkPO7qOGHX7yLjXnZj7y3EbhT7fMvqDZYWM2+Sn90Y3ZEalIlhxQ22jS\nsWy/PrJZtsKhQfmv7bsW21K00ESpAkZsWskDQKCx+H6CgtvjNUpk1hotdB7W\nPqvIbZqrHizAhldve79o2LZg7DIdF+EXV7ubhCtVb02HExcU9fxVUxLQJc8E\n+sK8XknAK0tnBp+QlgSRc9tdfMzf/+qIiy8z+qRDg4UoragwPZ170UxcwL4c\nk/udGO2Qq65Vr1ZBUEtsphT8mwlbZipPV92uMLvINHO+LkovyB7jwaEAjejO\np9T5Ehjz/ew7xM62P7w+cUiViOc9MNT71VQn6BPW1RcG3hwQOgMFgMK3vAIy\n+Gz8rTYlmEg6f0NsCV5DZXepoTLim9eXVQRNt0hZ2RVoy/8ikx61GItoPo+U\np+Lo\r\n=99c4\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8.9.0"
  },
  "gitHead": "e4b82f6d940b335d8dbeece7846507f6f6064297",
  "homepage": "https://github.com/hapijs/joi",
  "keywords": [
    "hapi",
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "marsup",
      "email": "nicolas@morel.io"
    },
    {
      "name": "nlf",
      "email": "quitlahok@gmail.com"
    },
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    }
  ],
  "name": "joi",
  "optionalDependencies": {},
  "readme": "![joi Logo](https://raw.github.com/hapijs/joi/master/images/joi.png)\n\nObject schema description language and validator for JavaScript objects.\n\n[![npm version](https://badge.fury.io/js/joi.svg)](http://badge.fury.io/js/joi)\n[![Build Status](https://travis-ci.org/hapijs/joi.svg?branch=master)](https://travis-ci.org/hapijs/joi)\n[![NSP Status](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e/badge)](https://nodesecurity.io/orgs/hapijs/projects/0394bf83-b5bc-410b-878c-e8cf1b92033e)\n[![Known Vulnerabilities](https://snyk.io/test/github/hapijs/joi/badge.svg)](https://snyk.io/test/github/hapijs/joi)\n\nLead Maintainer: [Nicolas Morel](https://github.com/marsup)\n\n# Introduction\n\nImagine you run facebook and you want visitors to sign up on the website with real names and not something like `l337_p@nda` in the first name field. How would you define the limitations of what can be inputted and validate it against the set rules?\n\nThis is joi, joi allows you to create *blueprints* or *schemas* for JavaScript objects (an object that stores information) to ensure *validation* of key information.\n\n# API\nSee the detailed [API Reference](https://github.com/hapijs/joi/blob/v13.7.0/API.md).\n\n# Example\n\n```javascript\nconst Joi = require('joi');\n\nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email({ minDomainAtoms: 2 })\n}).with('username', 'birthyear').without('password', 'access_token');\n\n// Return result.\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\n// result.error === null -> valid\n\n// You can also pass a callback which will be called synchronously with the validation result.\nJoi.validate({ username: 'abc', birthyear: 1994 }, schema, function (err, value) { });  // err === null -> valid\n\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birthyear`\n* `password`\n    * an optional string\n    * must satisfy the custom regex\n    * cannot appear together with `access_token`\n* `access_token`\n    * an optional, unconstrained string or number\n* `birthyear`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n    * must have two domain parts e.g. `example.com`\n\n# Usage\n\nUsage is a two steps process. First, a schema is constructed using the provided types and constraints:\n\n```javascript\nconst schema = {\n    a: Joi.string()\n};\n```\n\nNote that **joi** schema objects are immutable which means every additional rule added (e.g. `.min(5)`) will return a\nnew schema object.\n\nThen the value is validated against the schema:\n\n```javascript\nconst {error, value} = Joi.validate({ a: 'a string' }, schema);\n\n// or\n\nJoi.validate({ a: 'a string' }, schema, function (err, value) { });\n```\n\nIf the input is valid, then the error will be `null`, otherwise it will be an Error object.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```javascript\nconst schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value, callback)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```javascript\nconst schema = Joi.object().keys({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n\n* Values (or keys in case of objects) are optional by default.\n\n    ```javascript\n    Joi.validate(undefined, Joi.string()); // validates fine\n    ```\n\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\"required\"` when passing `options`:\n\n    ```javascript\n    Joi.validate(undefined, Joi.string().required());\n    // or\n    Joi.validate(undefined, Joi.string(), /* options */ { presence: \"required\" });\n    ```\n\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order after whitelist and blacklist checks.\n\n# Browsers\n\nJoi doesn't directly support browsers, but you could use [joi-browser](https://github.com/jeffbski/joi-browser) for an ES5 build of Joi that works in browsers, or as a source of inspiration for your own builds.\n\n## Acknowledgements\n\nThis project is kindly sponsored by:\n\n[![nearForm logo](https://www.nearform.com/img/nearform-logotype.svg)](https://nearform.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "test": "lab -t 100 -a code -L",
    "test-cov-html": "lab -r html -o coverage.html -a code",
    "test-debug": "lab -a code",
    "toc": "hapitoc",
    "version": "npm run toc && git add API.md README.md"
  },
  "version": "13.7.0"
}
